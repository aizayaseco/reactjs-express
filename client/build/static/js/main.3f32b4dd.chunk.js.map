{"version":3,"sources":["utils/loadable.js","containers/HomePage/Loadable.js","containers/Pexel/Loadable.js","containers/NotFoundPage/Loadable.js","App.js","serviceWorker.js","index.js"],"names":["loadable","importFunc","fallback","arguments","length","undefined","LazyComponent","lazy","props","React","createElement","Suspense","appHistory","createBrowserHistory","App","Component","constructor","state","response","render","className","href","Router","history","Switch","Route","exact","path","component","HomePage","Pexel","NotFoundPage","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8KAYeA,MAVE,SAACC,GAA0D,IAA9C,SAAEC,EAAW,MAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAED,SAAU,MAC9D,MAAMI,EAAgBC,eAAKN,GAE3B,OAAOO,GACLC,IAAAC,cAACC,WAAQ,CAACT,SAAUA,GAClBO,IAAAC,cAACJ,EAAkBE,KCDVR,IAAS,IAAM,oDCEfA,IAAS,IAAM,oDCFfA,IAAS,IAAM,oDCIvB,MAAMY,EAAaC,cAE1B,MAAMC,UAAYC,YAAUC,cAAA,SAAAb,WAAA,KAC1Bc,MAAQ,CACNC,SAAU,IAGZC,SACE,OACEV,IAAAC,cAAA,OAAKU,UAAU,OACbX,IAAAC,cAAA,OAAKU,UAAU,mBACbX,IAAAC,cAAA,MAAIU,UAAU,8BACZX,IAAAC,cAAA,MAAIU,UAAU,YACZX,IAAAC,cAAA,KAAGU,UAAU,kBAAkBC,KAAK,KAAI,oBAE1CZ,IAAAC,cAAA,MAAIU,UAAU,YACZX,IAAAC,cAAA,KAAGU,UAAU,WAAWC,KAAK,WAAU,iBAI7CZ,IAAAC,cAACY,IAAM,CAACC,QAASX,GACjBH,IAAAC,cAACc,IAAM,KACPf,IAAAC,cAACe,IAAK,CAACC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjCpB,IAAAC,cAACe,IAAK,CAACC,OAAK,EAACC,KAAK,cAAcC,UAAWE,IAC3CrB,IAAAC,cAACe,IAAK,CAACG,UAAWG,QAQXjB,O,gLC9BKkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASlB,OACPV,IAAAC,cAACD,IAAM6B,WAAU,KACf7B,IAAAC,cAACI,IAAG,OAENyB,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMC,IACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3f32b4dd.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\n\nconst loadable = (importFunc, { fallback = null } = { fallback: null }) => {\n  const LazyComponent = lazy(importFunc);\n\n  return props => (\n    <Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n\nexport default loadable;\n","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport loadable from '../../utils/loadable';\n\nexport default loadable(() => import('./index'));\n","/**\n *\n * Asynchronously loads the component for Pexel\n *\n */\n\nimport loadable from '../../utils/loadable';\n\nexport default loadable(() => import('./index'));\n","/**\n * Asynchronously loads the component for NotFoundPage\n */\n\nimport loadable from '../../utils/loadable';\n\nexport default loadable(() => import('./index'));\n","import React, { Component } from 'react';\nimport { Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nimport { createBrowserHistory } from \"history\";\n\nimport HomePage from './containers/HomePage/Loadable';\nimport Pexel from './containers/Pexel/Loadable';\nimport NotFoundPage from './containers/NotFoundPage/Loadable';\n\nexport const appHistory = createBrowserHistory();\n\nclass App extends Component {\n  state = {\n    response: {}\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container mt-10\">\n          <ul className=\"nav justify-content-center\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" href=\"/\">Time Conversion</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/feed/1\">Pexel Feed</a>\n            </li>\n          </ul>\n        </div>\n        <Router history={appHistory}>\n        <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/feed/:page\" component={Pexel} />\n        <Route component={NotFoundPage} />\n      </Switch>\n      </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}